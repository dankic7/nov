import streamlit as st
from supabase import create_client
from decimal import Decimal
from datetime import date

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞ ---
URL = st.secrets["SUPABASE_URL"]
KEY = st.secrets["SUPABASE_ANON_KEY"]
sb = create_client(URL, KEY)

st.set_page_config(page_title="–ú–µ–Ω–∞—ü–µ—Ä –∑–∞ –º—É—à—Ç–µ—Ä–∏–∏ ", layout="wide")

# --- Helpers ---
def dec(x):
    try:
        return Decimal(str(x))
    except Exception:
        return Decimal("0")

def fmt_money(d: Decimal) -> str:
    if d == d.to_integral_value():
        return f"{int(d)} –¥–µ–Ω."
    return f"{d:.2f} –¥–µ–Ω."

# --- Customers ---
def fetch_customers(q: str = ""):
    q = (q or "").strip()
    if not q:
        res = sb.table("customers").select("*").order("created_at", desc=True).execute()
    else:
        res = sb.table("customers").select("*").ilike("name", f"%{q}%").execute()
    return res.data if res.data else []

def insert_customer(name, phone, note, initial_debt):
    return sb.table("customers").insert({
        "name": name,
        "phone": phone,
        "note": note,
        "initial_debt": initial_debt
    }).execute()

def update_customer(cid, name, phone, note, initial_debt):
    return sb.table("customers").update({
        "name": name,
        "phone": phone,
        "note": note,
        "initial_debt": initial_debt
    }).eq("id", cid).execute()

def delete_customer(cid):
    return sb.table("customers").delete().eq("id", cid).execute()

# --- Payments ---
def fetch_payments(customer_id):
    res = sb.table("payments").select("*").eq("customer_id", customer_id).order("pay_date", desc=True).execute()
    return res.data if res.data else []

def add_payment(customer_id, amount, pay_date, note):
    return sb.table("payments").insert({
        "customer_id": customer_id,
        "amount": amount,
        "pay_date": str(pay_date),
        "note": note
    }).execute()

# --- UI ---
st.title("üìí –ú–µ–Ω–∞—ü–µ—Ä –∑–∞ –º—É—à—Ç–µ—Ä–∏–∏ –∏ –¥–æ–ª–≥–æ–≤–∏")

menu = st.sidebar.radio("–ú–µ–Ω–∏—Ç–æ:", ["–õ–∏—Å—Ç–∞", "–î–æ–¥–∞—ò –º—É—à—Ç–µ—Ä–∏—ò–∞"])

if menu == "–õ–∏—Å—Ç–∞":
    q = st.text_input("üîç –ü—Ä–µ–±–∞—Ä–∞—ò –º—É—à—Ç–µ—Ä–∏–∏ (–∏–º–µ/—Ç–µ–ª–µ—Ñ–æ–Ω)")
    customers = fetch_customers(q)

    if not customers:
        st.info("‚ùå –ù–µ–º–∞ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∏ –º—É—à—Ç–µ—Ä–∏–∏.")
    else:
        for c in customers:
            col1, col2, col3, col4 = st.columns([3,2,2,2])
            with col1:
                st.write(f"**{c['name']}**")
                st.caption(c.get("phone") or "")
            with col2:
                st.write("üìå –ü–æ—á–µ—Ç–µ–Ω –¥–æ–ª–≥:", fmt_money(dec(c.get("initial_debt") or 0)))
            with col3:
                pays = fetch_payments(c["id"])
                total = dec(c.get("initial_debt") or 0) + sum([dec(p["amount"]) for p in pays])
                st.write("üí∞ –ü—Ä–µ–æ—Å—Ç–∞–Ω–∞—Ç–æ:", fmt_money(total))
            with col4:
                if st.button("üìÇ –î–µ—Ç–∞–ª–∏", key=f"det-{c['id']}"):
                    st.session_state["view_customer"] = c["id"]

elif menu == "–î–æ–¥–∞—ò –º—É—à—Ç–µ—Ä–∏—ò–∞":
    st.subheader("‚ûï –ù–æ–≤–∞ –º—É—à—Ç–µ—Ä–∏—ò–∞")
    name = st.text_input("–ò–º–µ –∏ –ø—Ä–µ–∑–∏–º–µ")
    phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
    note = st.text_area("–ë–µ–ª–µ—à–∫–∞")
    debt = st.number_input("–ü–æ—á–µ—Ç–µ–Ω –¥–æ–ª–≥", min_value=0.0, step=100.0)
    if st.button("‚úÖ –î–æ–¥–∞–¥–∏"):
        insert_customer(name, phone, note, dec(debt))
        st.success("‚úÖ –ú—É—à—Ç–µ—Ä–∏—ò–∞—Ç–∞ –µ –¥–æ–¥–∞–¥–µ–Ω–∞!")

# --- –î–µ—Ç–∞–ª–µ–Ω –ø—Ä–∏–∫–∞–∑ ---
if "view_customer" in st.session_state:
    cid = st.session_state["view_customer"]
    cust = sb.table("customers").select("*").eq("id", cid).execute().data[0]
    st.header(f"üìå –î–µ—Ç–∞–ª–∏: {cust['name']}")

    # –û—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏
    with st.expander("–û—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏", expanded=True):
        new_name = st.text_input("–ò–º–µ –∏ –ø—Ä–µ–∑–∏–º–µ", value=cust["name"])
        new_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", value=cust.get("phone") or "")
        new_note = st.text_area("–ë–µ–ª–µ—à–∫–∞", value=cust.get("note") or "")
        new_debt = st.number_input("–ü–æ—á–µ—Ç–µ–Ω –¥–æ–ª–≥", value=float(cust.get("initial_debt") or 0))
        if st.button("üíæ –ó–∞—á—É–≤–∞—ò –ø—Ä–æ–º–µ–Ω–∏"):
            update_customer(cid, new_name, new_phone, new_note, dec(new_debt))
            st.success("‚úÖ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–µ –∑–∞—á—É–≤–∞–Ω–∏!")

        if st.button("üóëÔ∏è –ò–∑–±—Ä–∏—à–∏ –º—É—à—Ç–µ—Ä–∏—ò–∞"):
            delete_customer(cid)
            st.session_state.pop("view_customer")
            st.warning("‚ùå –ú—É—à—Ç–µ—Ä–∏—ò–∞—Ç–∞ –µ –∏–∑–±—Ä–∏—à–∞–Ω–∞!")

    # –£–ø–ª–∞—Ç–∏ / –Ω–æ–≤ –¥–æ–ª–≥
    st.subheader("üíµ –£–ø–ª–∞—Ç–∏ / –ù–æ–≤ –¥–æ–ª–≥")
    pay_date = st.date_input("–î–∞—Ç—É–º", value=date.today())
    amount = st.number_input("–ò–∑–Ω–æ—Å (—É–ø–ª–∞—Ç–∞=+, –Ω–æ–≤ –¥–æ–ª–≥=-)", step=100.0, format="%.2f")
    note = st.text_input("–ë–µ–ª–µ—à–∫–∞ (–æ–ø—Ü.)")
    if st.button("‚ûï –î–æ–¥–∞—ò —Å—Ç–∞–≤–∫–∞"):
        add_payment(cid, dec(amount), pay_date, note)
        st.success("‚úÖ –°—Ç–∞–≤–∫–∞—Ç–∞ –µ –¥–æ–¥–∞–¥–µ–Ω–∞!")

    # –ò—Å—Ç–æ—Ä–∏—ò–∞
    pays = fetch_payments(cid)
    if pays:
        st.write("üìú –ò—Å—Ç–æ—Ä–∏—ò–∞ –Ω–∞ —É–ø–ª–∞—Ç–∏/–¥–æ–ª–≥–æ–≤–∏")
        for p in pays:
            st.write(f"{p['pay_date']} | {fmt_money(dec(p['amount']))} | {p.get('note') or ''}")
    else:
        st.info("–ù–µ–º–∞ —É–ø–ª–∞—Ç–∏/–¥–æ–ª–≥–æ–≤–∏ –∑–∞ –æ–≤–æ—ò –∫–ª–∏–µ–Ω—Ç.")

